using NightlyCode.Discord.Data.Activities;
using NightlyCode.Discord.Data.Embeds;
using NightlyCode.Japi.Json;

namespace NightlyCode.Discord.Data {
    public class Message {

        /// <summary>
        /// id of the message
        /// </summary>
        public string ID { get; set; }

        /// <summary>
        /// id of the channel the message was sent in
        /// </summary>
        [JsonKey("channel_id")]
        public string ChannelID { get; set; }

        /// <summary>
        /// the author of this message (not guaranteed to be a valid user, see below)
        /// </summary>
        public User Author { get; set; }

        /// <summary>
        /// contents of the message
        /// </summary>
        public string Content { get; set; }

        /// <summary>
        /// when this message was sent
        /// </summary>
        public string Timestamp { get; set; }

        /// <summary>
        /// when this message was edited (or null if never)
        /// </summary>
        [JsonKey("edited_timestamp")]
        public string EditedTimestamp { get; set; }

        /// <summary>
        /// whether this was a TTS message
        /// </summary>
        public bool TTS { get; set; }

        /// <summary>
        /// whether this message mentions everyone
        /// </summary>
        [JsonKey("mention_everyone")]
        public bool MentionEveryone { get; set; }

        /// <summary>
        /// users specifically mentioned in the message
        /// </summary>
        public User[] Mentions { get; set; }

        /// <summary>
        /// roles specifically mentioned in this message
        /// </summary>
        [JsonKey("mention_roles")]
        public Role[] MentionRoles { get; set; }

        /// <summary>
        /// any attached files
        /// </summary>
        public Attachment[] Attachments { get; set; }

        /// <summary>
        /// any embedded content
        /// </summary>
        public Embed[] Embeds { get; set; }

        /// <summary>
        /// reactions to the message
        /// </summary>
        public Reaction[] Reactions { get; set; }

        /// <summary>
        /// used for validating a message was sent
        /// </summary>
        public string Nonce { get; set; }

        /// <summary>
        /// whether this message is pinned
        /// </summary>
        public bool Pinned { get; set; }

        /// <summary>
        /// if the message is generated by a webhook, this is the webhook's id
        /// </summary>
        [JsonKey("webhook_id")]
        public string WebhookID { get; set; }

        /// <summary>
        /// type of message
        /// </summary>
        public MessageType Type { get; set; }

        /// <summary>
        /// sent with Rich Presence-related chat embeds
        /// </summary>
        public Activity Activity { get; set; }
    }
}